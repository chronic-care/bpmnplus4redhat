package com;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

/**
 * This class was automatically generated by the data modeler tool.
 */
@javax.xml.bind.annotation.XmlRootElement
public class Patient implements java.io.Serializable {

	@org.kie.api.definition.type.Label("Metformin Status")
	public java.lang.String metforminStatus = "NONE";

	@org.kie.api.definition.type.Label("Patient Goals")
	public java.util.List<com.CodedElement> patientGoals = new ArrayList<CodedElement>();

	public CodedElement getMedicationRequestCode() {
		if (medicationRequestCode == null) {
			medicationRequestCode = new CodedElement();
		}
		return medicationRequestCode;
	}

	public void setMedicationRequestCode(CodedElement medicationRequestCode) {
		this.medicationRequestCode = medicationRequestCode;
	}

	public java.lang.String getMedicationRequestSIG() {
		if (medicationRequestSIG == null) {
			medicationRequestSIG = "";
		}
		return medicationRequestSIG;
	}

	public void setMedicationRequestSIG(java.lang.String medicationRequestSIG) {
		this.medicationRequestSIG = medicationRequestSIG;
	}

	static final long serialVersionUID = 1L;

	@org.kie.api.definition.type.Label("Patient ID")
	public java.lang.String patientID;

	@org.kie.api.definition.type.Label("Patient Name")
	public java.lang.String patientName;

	@org.kie.api.definition.type.Label("Patient Gender")
	public java.lang.String patientGender;

	@org.kie.api.definition.type.Label("Patient DOB")
	public java.lang.String patientDOB;

	@org.kie.api.definition.type.Label("Conditions")
	public java.util.List<CodedElement> conditions = new ArrayList<CodedElement>();

	@org.kie.api.definition.type.Label("Comorbidity Status")
	public java.lang.String comorbidityStatus = "ABSENT";

	@org.kie.api.definition.type.Label("Microvascular Complications")
	public java.lang.String microvascularComplications = "ABSENT";

	@org.kie.api.definition.type.Label("Medications")
	public java.util.List<CodedElement> medications = new ArrayList<CodedElement>();;

	@org.kie.api.definition.type.Label("Blood Sugar")
	public Integer bloodSugar;

	@org.kie.api.definition.type.Label("HBA1C Range High")
	public double hbA1cRangeHigh;

	@org.kie.api.definition.type.Label("HBA1C Range Low")
	public double hbA1cRangeLow;

	@org.kie.api.definition.type.Label("HBA1C Status")
	public java.lang.String hba1cStatus = "ABOVE";

	@org.kie.api.definition.type.Label("Latest HBA1C")
	public double latestHBA1C;

	@org.kie.api.definition.type.Label("Severity")
	public java.lang.Boolean severeStatus;

	@org.kie.api.definition.type.Label("Medication Request Code")
	public CodedElement medicationRequestCode;

	@org.kie.api.definition.type.Label("Medication Request SIG")
	public java.lang.String medicationRequestSIG;

	public Patient() {
		this.severeStatus = false;
	}

	public Patient(String patientID, Integer bloodSugar, double hbA1cRangeLow,
			double hbA1cRangeHigh, String patientGender, Boolean severeStatus,
			List<CodedElement> conditions, String comorbidityStatus,
			String microvascularComplications, double latestHBA1C,
			String hba1cStatus, String patientDOB, String patientName,
			java.util.List<CodedElement> medications) {
		super();
		this.patientID = patientID;
		this.bloodSugar = bloodSugar;
		this.hbA1cRangeLow = hbA1cRangeLow;
		this.hbA1cRangeHigh = hbA1cRangeHigh;
		this.patientGender = patientGender;
		this.severeStatus = severeStatus;
		this.conditions = conditions;
		this.comorbidityStatus = comorbidityStatus;
		this.microvascularComplications = microvascularComplications;
		this.latestHBA1C = latestHBA1C;
		this.hba1cStatus = hba1cStatus;
		this.patientDOB = patientDOB;
		this.patientName = patientName;
		this.medications = medications;
	}

	public java.lang.Integer getBloodSugar() {
		return this.bloodSugar;
	}

	public java.util.List<CodedElement> getConditions() {
		return this.conditions;
	}

	public java.lang.String getComorbidityStatus() {
		this.comorbidityStatus = "ABSENT";
		// if (!conditions.isEmpty()) {
		for (CodedElement c : conditions) {
			for (String s : COMORBIDITYPRESENTCODES) {
				if (s.equals(c.getCode())) {
					this.comorbidityStatus = "PRESENT";
					for (CodedElement cc : conditions) {
						for (String s2 : COMORBODITYMARKEDCODES) {
							if (s2.equals(cc.getCode())) {
								this.comorbidityStatus = "MARKED";
							}
						}
					}
				}
			}
		}
		// }
		return this.comorbidityStatus;
	}

	public double getHbA1cRangeHigh() {
		return this.hbA1cRangeHigh;
	}

	public double getHbA1cRangeLow() {
		return this.hbA1cRangeLow;
	}

	public java.lang.String getHba1cStatus() {
		return this.hba1cStatus;
	}

	public double getLatestHBA1C() {
		return this.latestHBA1C;
	}

	public java.util.List<CodedElement> getMedications() {
		return medications;
	}

	public java.lang.String getMicrovascularComplications() {

		this.microvascularComplications = "ABSENT";

		for (CodedElement c : conditions) {
			for (String s : MICROVASCULARCODES) {
				if (s.equals(c.getCode())) {
					this.microvascularComplications = "PRESENT";
				}
			}
		}
		return this.microvascularComplications;
	}

	public java.lang.String getPatientDOB() {
		return this.patientDOB;
	}

	public java.lang.String getPatientGender() {
		return this.patientGender;
	}

	public java.lang.String getPatientID() {
		return this.patientID;
	}

	public java.lang.String getPatientName() {
		return this.patientName;
	}

	public java.lang.Boolean getSevereStatus() {
		return this.severeStatus;
	}

	public void setBloodSugar(java.lang.Integer bloodSugar) {
		this.bloodSugar = bloodSugar;
	}

	public void setConditions(java.util.List<CodedElement> conditions) {
		if (conditions != null) {
			this.conditions.addAll(conditions);
		}
	}

	public void setComorbidityStatus(java.lang.String comorbidityStatus) {
		this.comorbidityStatus = comorbidityStatus;
	}

	public void setHbA1cRangeHigh(double hbA1cRangeHigh) {
		this.hbA1cRangeHigh = hbA1cRangeHigh;
	}

	public void setHbA1cRangeLow(double hbA1cRangeLow) {
		this.hbA1cRangeLow = hbA1cRangeLow;
	}

	public void setHba1cStatus(java.lang.String hba1cStatus) {
		this.hba1cStatus = hba1cStatus;
	}

	public void setLatestHBA1C(double latestHBA1C) {
		this.latestHBA1C = latestHBA1C;
	}

	public void setMedications(java.util.List<CodedElement> medications) {
		if (medications != null) {
			this.medications.addAll(medications);
		}
	}

	public void setMicrovascularComplications(
			java.lang.String microvascularComplications) {
		this.microvascularComplications = microvascularComplications;
	}

	public void setPatientDOB(java.lang.String patientDOB) {
		this.patientDOB = patientDOB;
	}

	public void setPatientGender(java.lang.String patientGender) {
		this.patientGender = patientGender;
	}

	public void setPatientID(java.lang.String patientID) {
		this.patientID = patientID;
	}

	public void setPatientName(java.lang.String patientName) {
		this.patientName = patientName;
	}

	public void setSevereStatus(java.lang.Boolean severeStatus) {
		this.severeStatus = severeStatus;
	}

	public void setLatestRange() {
		this.latestHBA1C = new BigDecimal(
				ThreadLocalRandom.current().nextDouble(
						this.hbA1cRangeLow - 0.5, this.hbA1cRangeHigh + 0.5))
				.setScale(2, RoundingMode.HALF_EVEN).doubleValue();
	}

	public java.lang.String getMetforminStatus() {
		return this.metforminStatus;
	}

	public void setMetforminStatus(java.lang.String metforminStatus) {
		this.metforminStatus = metforminStatus;
	}

	public void calculateHBA1CStatus() {
		if (latestHBA1C <= hbA1cRangeLow) {
			hba1cStatus = "BELOW";
		} else if (latestHBA1C >= hbA1cRangeHigh) {
			hba1cStatus = "ABOVE";
		} else {
			hba1cStatus = "OK";
		}
	}

	final static String COMORBIDITYPRESENTCODES[] = {"I48.0", "42343007",
			"443254009", "443343001", "194734000", "195080001", "57054005",
			"I50.30", "56218007", "59621000", "426749004", "49436004",
			"400047006", "709044004", "N18.6", "14669001", "13645005", "B18.2",
			"129834002", "44054006", "28876000"};

	final static String COMORBODITYMARKEDCODES[] = {"231482005", "7200002"};

	final static String MICROVASCULARCODES[] = {"4855003", "400047006",
			"424736006"};

	public java.util.List<com.CodedElement> getPatientGoals() {
		return this.patientGoals;
	}

	public void setPatientGoals(java.util.List<com.CodedElement> patientGoals) {
	    	if (patientGoals != null) {
			this.patientGoals.addAll(patientGoals);
		}
	}

 

 

	public void addANewPatientGoal(com.CodedElement newPatientGoal) {
		this.patientGoals.add(newPatientGoal);
	}

	public Patient(java.lang.String metforminStatus,
			java.util.List<com.CodedElement> patientGoals,
		  java.lang.String patientID,
			java.lang.String patientName, java.lang.String patientGender,
			java.lang.String patientDOB,
			java.util.List<com.CodedElement> conditions,
			java.lang.String comorbidityStatus,
			java.lang.String microvascularComplications,
			java.util.List<com.CodedElement> medications,
			java.lang.Integer bloodSugar, double hbA1cRangeHigh,
			double hbA1cRangeLow, java.lang.String hba1cStatus,
			double latestHBA1C, java.lang.Boolean severeStatus,
			com.CodedElement medicationRequestCode,
			java.lang.String medicationRequestSIG) {
		this.metforminStatus = metforminStatus;
		this.patientGoals = patientGoals;
	 
		this.patientID = patientID;
		this.patientName = patientName;
		this.patientGender = patientGender;
		this.patientDOB = patientDOB;
		this.conditions = conditions;
		this.comorbidityStatus = comorbidityStatus;
		this.microvascularComplications = microvascularComplications;
		this.medications = medications;
		this.bloodSugar = bloodSugar;
		this.hbA1cRangeHigh = hbA1cRangeHigh;
		this.hbA1cRangeLow = hbA1cRangeLow;
		this.hba1cStatus = hba1cStatus;
		this.latestHBA1C = latestHBA1C;
		this.severeStatus = severeStatus;
		this.medicationRequestCode = medicationRequestCode;
		this.medicationRequestSIG = medicationRequestSIG;
	}

}